-------------------------------------------------------------------------
-- Copyright (c) 2009 State Street Bank and Trust Corp.
-- 225 Franklin Street, Boston, MA 02110, U.S.A.
-- All rights reserved.
--
-- "GEC_DAILY_JOB_PKG.sql is the copyrighted,
-- proprietary property of State Street Bank and Trust Company and its
-- subsidiaries and affiliates which retain all right, title and interest
-- therein."
--
-- Revision History
--
-- Date            Programmer                Notes
-- ------------    --------------------      ----------------------------
-- Apr  9, 2009    Zhao Hong                 initial
--
-- 
-------------------------------------------------------------------------
CREATE OR REPLACE PACKAGE GEC_DAILY_JOB_PKG
AS

	PROCEDURE RESET_LOCATE_ID(P_TYPE 	IN 	VARCHAR2); 

	PROCEDURE DAILY_JOB;

	--The procedure is to reset sequence next value to 1.
	--1. Precondition of this procedure: the maxvalue of sequence RESET_FILE_COUNTER_SEQ must be equal to local variable v_maxSeqValue. 
	--2. An alternative approach is to drop the sequence and create it again by start value 1. 
	--      But this approach need additional db privilege that may be not available in production database.
	PROCEDURE RESET_FILE_COUNTER_SEQ;
	
	--The procedure will move old activities to archive table. The day window is based on business day, Eg:
	--    If today is Friday and day window is 2, the data of Wednesday will be archived usually.
	PROCEDURE ARCHIVE_ACTIVITIES;
	
	--The procedure will move old locates to history table from archive table
	PROCEDURE ARCHIVE_PURGE_LOCATES;

	--This function will return the first day of the day window. The day window is based on business day. Eg:
	--    If today is Sunday and daywindow is 2, the result will be last Thursday usually.
	--    If today is Friday(trading day) and daywindow is 2, the result will be Thursday usually.
	FUNCTION GET_BUSINESS_DAY_BY_DAY_WINDOW( P_DAY_WINDOW IN NUMBER ) RETURN DATE;
	
	--The procedure will check and add default daily index rate (DFLT=99.00 and N/A=00.00) into GEC_INDEX_RATE.
	PROCEDURE ADD_DAILY_INDEX_RATE;
	 
	--purge availability older than 90 trading days in gec_im_availability_archive
	--move availability that is 4 trading days before current day from gec_im_availability to gec_im_availability_archive.		
	PROCEDURE ARCHIVE_PURGE_AVAILABILITY;
	
	PROCEDURE ARCHIVE_PURGE_AVAIL_ERR;
	
	PROCEDURE ARCHIVE_MESSAGE;
	
	PROCEDURE DELETE_ARCHIVED_MESSAGE;
	
	PROCEDURE ARCHIVE_PURGE_EXCHANGE_RATE;
	
	--The procedure will delete all datas whose LAST_UPDATED_AT < (SYSDATE-ASSET_AUDIT_DAY_WINDOW) from gec_asset_aud table.
	PROCEDURE PURGE_ASSET_AUD;
	
	PROCEDURE ARCHIVE_PURGE_LENDER_AVAIL;
	
	PROCEDURE CHECK_EXPIRE_BULK_G1_TRADES;
	PROCEDURE CHECK_EXPIRE_BULK_G1_RETURNS;
	--The procedure will purge old data from table gec_job_log
	PROCEDURE ARCHIVE_PURGE_JOB_LOG;
	
END GEC_DAILY_JOB_PKG;
/


CREATE OR REPLACE PACKAGE BODY GEC_DAILY_JOB_PKG
AS

	PROCEDURE DAILY_JOB
	IS
	BEGIN
		GEC_LOG_PKG.LOG_PERFORMANCE_START('GEC_DAILY_JOB_PKG.DAILY_JOB');
		RESET_FILE_COUNTER_SEQ;
		ARCHIVE_ACTIVITIES;
		COMMIT;
		ARCHIVE_PURGE_LOCATES;
		COMMIT;
		ADD_DAILY_INDEX_RATE;
		COMMIT;
		ARCHIVE_PURGE_AVAILABILITY;
		COMMIT;
		ARCHIVE_PURGE_AVAIL_ERR;
		COMMIT;
		ARCHIVE_MESSAGE;
		COMMIT;
		DELETE_ARCHIVED_MESSAGE;
		COMMIT;
		ARCHIVE_PURGE_EXCHANGE_RATE;
		COMMIT;
		PURGE_ASSET_AUD;
		COMMIT;
		ARCHIVE_PURGE_LENDER_AVAIL;
		COMMIT;
		CHECK_EXPIRE_BULK_G1_TRADES;
		COMMIT;
		CHECK_EXPIRE_BULK_G1_RETURNS;
		COMMIT;
		ARCHIVE_PURGE_JOB_LOG;
    	COMMIT;
		GEC_LOG_PKG.LOG_PERFORMANCE_END('GEC_DAILY_JOB_PKG.DAILY_JOB');
	EXCEPTION WHEN OTHERS THEN
		ROLLBACK;
		GEC_LOG_PKG.LOG_PERFORMANCE_END('GEC_DAILY_JOB_PKG.DAILY_JOB', 'F', 'FAILURE');
	END DAILY_JOB;
	
	PROCEDURE RESET_LOCATE_ID(P_TYPE 	IN 	VARCHAR2)
	IS  
		V_CURR_VAL INTEGER;
		V_DELTA_VAL INTEGER;
	BEGIN
		GEC_LOG_PKG.LOG_PERFORMANCE_START('GEC_DAILY_JOB_PKG.RESET_LOCATE_ID');
		IF ( GEC_CONSTANTS_PKG.C_LOCATE_ID_RESET_TYPE_AT_EOD = P_TYPE ) THEN
		--AT END OF DAY , It's at about 11:55 pm.
		--Assumption:Locate ID ACTURALLY less than 900,000 in single day.
		-- set locate id to be 900,000
		
		  EXECUTE IMMEDIATE 'ALTER SEQUENCE GEC_LOCATE_ID_SEQ MINVALUE 0';    
		  --GET NEXT VALUE OF GEC_LOCATE_ID_SEQ
		  EXECUTE IMMEDIATE 'SELECT GEC_LOCATE_ID_SEQ.NEXTVAL FROM DUAL ' INTO V_CURR_VAL ;   
		  --SET INCREMENT TO BE -CURR_VAL
		  V_DELTA_VAL := 900000-V_CURR_VAL;
		  EXECUTE IMMEDIATE 'ALTER SEQUENCE GEC_LOCATE_ID_SEQ INCREMENT BY ' || V_DELTA_VAL ; 
		  --GET NEXT VALUE AND IT WILL BE 0
		  EXECUTE IMMEDIATE 'SELECT GEC_LOCATE_ID_SEQ.NEXTVAL FROM DUAL' INTO V_CURR_VAL ; 
		  --SET 
		  EXECUTE IMMEDIATE 'ALTER SEQUENCE GEC_LOCATE_ID_SEQ INCREMENT BY 1'; 
		ELSIF ( GEC_CONSTANTS_PKG.C_LOCATE_ID_RESET_TYPE_AT_SOD = P_TYPE ) THEN
		--AT BEGINNING OF DAY , AT ABOUT 12:05 AM.
		-- SET LOCATE ID TO BE 0.

		  EXECUTE IMMEDIATE 'ALTER SEQUENCE GEC_LOCATE_ID_SEQ MINVALUE 0';    
		  --GET NEXT VALUE OF GEC_LOCATE_ID_SEQ
		  EXECUTE IMMEDIATE 'SELECT GEC_LOCATE_ID_SEQ.NEXTVAL FROM DUAL' INTO V_CURR_VAL ;   
		  --SET INCREMENT TO BE -CURR_VAL
		  EXECUTE IMMEDIATE 'ALTER SEQUENCE GEC_LOCATE_ID_SEQ INCREMENT BY -' || V_CURR_VAL ; 
		  --GET NEXT VALUE AND IT WILL BE 0
		  EXECUTE IMMEDIATE 'SELECT GEC_LOCATE_ID_SEQ.NEXTVAL FROM DUAL' INTO V_CURR_VAL ; 
		  --SET 
		  EXECUTE IMMEDIATE 'ALTER SEQUENCE GEC_LOCATE_ID_SEQ INCREMENT BY 1';  
		ELSE
		GEC_LOG_PKG.LOG_PERFORMANCE_END('GEC_DAILY_JOB_PKG.RESET_LOCATE_ID', 'F', 'FAILURE');	
		END IF;
		
		GEC_LOG_PKG.LOG_PERFORMANCE_END('GEC_DAILY_JOB_PKG.RESET_LOCATE_ID');
    END RESET_LOCATE_ID;

	PROCEDURE RESET_FILE_COUNTER_SEQ
	IS
		--This max value is used to limit the max running time of the stored procedure.
		v_seqMaxValue INTEGER := 99;

		v_value INTEGER;
		v_done VARCHAR2(1) := 'N';
	BEGIN
		GEC_LOG_PKG.LOG_PERFORMANCE_START('GEC_DAILY_JOB_PKG.RESET_FILE_COUNTER_SEQ');
		FOR v_i in 1..v_seqMaxValue
		LOOP
			select GEC_FILE_COUNTER_SEQ.nextval into v_value from dual;
			IF v_value = v_seqMaxValue THEN
				v_done := 'Y';
				EXIT;
			END IF;
		END LOOP;
		
		IF v_done = 'Y' THEN
			GEC_LOG_PKG.LOG_PERFORMANCE_END('GEC_DAILY_JOB_PKG.RESET_FILE_COUNTER_SEQ');
		ELSE
			GEC_LOG_PKG.LOG_PERFORMANCE_END('GEC_DAILY_JOB_PKG.RESET_FILE_COUNTER_SEQ', 'F', 'FAILUER');
		END IF;
	END RESET_FILE_COUNTER_SEQ;

	PROCEDURE ARCHIVE_ACTIVITIES
	IS
		V_DAY_WINDOW NUMBER(10);
		--activities of v_the_day should not be archived, while the activities before it should be archived.
		V_THE_DAY GEC_LOCATE_PREBORROW.created_at%TYPE;
	BEGIN	
		GEC_LOG_PKG.LOG_PERFORMANCE_START('GEC_DAILY_JOB_PKG.ARCHIVE_ACTIVITIES');
		BEGIN
		SELECT TO_NUMBER(ATTR_VALUE1) INTO V_DAY_WINDOW 
		  FROM GEC_CONFIG 
		 WHERE ATTR_GROUP = GEC_CONSTANTS_PKG.C_ARCHIVE
		   AND ATTR_NAME = GEC_CONSTANTS_PKG.C_ACTIVITY_DAY_WINDOW;

		V_THE_DAY := GET_BUSINESS_DAY_BY_DAY_WINDOW(V_DAY_WINDOW);
		
		INSERT INTO GEC_LOCATE_PREBORROW_ARCHIVE(
						LOCATE_PREBORROW_ID,LOCATE_ID,IM_AVAILABILITY_ID,ASSET_ID,BUSINESS_DATE,
						CLIENT_CD,IM_USER_ID,INVESTMENT_MANAGER_CD,FUND_CD,FUND_SOURCE,
						IM_DEFAULT_FUND_CD,IM_DEFAULT_CLIENT_CD,STRATEGY_ID,TRANSACTION_CD,ASSET_CODE,
						ASSET_CODE_TYPE,CUSIP,ISIN,SEDOL,QUIK,
						TICKER,ASSET_TYPE_ID,DESCRIPTION,FILE_VERSION,SHARE_QTY,
						RESERVED_SB_QTY,SB_QTY_RAL,RESERVED_NSB_QTY,SB_RATE,NSB_LOAN_NO,
						NSB_RATE,INDICATIVE_RATE,SOURCE_CD,REMAINING_SFP,POSITION_FLAG,
						SB_BROKER,RESTRICTION_CD,RESERVED_NFS_QTY,NFS_BORROW_ID,NFS_RATE,
						RESERVED_EXT2_QTY,EXT2_BORROW_ID,EXT2_RATE,STATUS,INITIAL_FLAG,
						UPDATED_BY,UPDATED_AT,CREATED_BY,CREATED_AT,COMMENT_TXT,
						INTERNAL_COMMENT_TXT,TRADER_APPROVED_QTY,REQUEST_ID,IM_REQUEST_ID,IM_LOCATE_ID,
						TRADE_COUNTRY_CD,SCHEDULED_AT,AT_POINT_AVAIL_QTY,AGENCY_BORROW_RATE,RECLAIM_RATE,
						ROW_NUMBER,	LIQUIDITY_FLAG, TRADE_COUNTRY_ALIAS_CD
						)
			 SELECT 
						LOCATE_PREBORROW_ID,LOCATE_ID,IM_AVAILABILITY_ID,ASSET_ID,BUSINESS_DATE,
						CLIENT_CD,IM_USER_ID,INVESTMENT_MANAGER_CD,FUND_CD,FUND_SOURCE,
						IM_DEFAULT_FUND_CD,IM_DEFAULT_CLIENT_CD,STRATEGY_ID,TRANSACTION_CD,ASSET_CODE,
						ASSET_CODE_TYPE,CUSIP,ISIN,SEDOL,QUIK,
						TICKER,ASSET_TYPE_ID,DESCRIPTION,FILE_VERSION,SHARE_QTY,
						RESERVED_SB_QTY,SB_QTY_RAL,RESERVED_NSB_QTY,SB_RATE,NSB_LOAN_NO,
						NSB_RATE,INDICATIVE_RATE,SOURCE_CD,REMAINING_SFP,POSITION_FLAG,
						SB_BROKER,RESTRICTION_CD,RESERVED_NFS_QTY,NFS_BORROW_ID,NFS_RATE,
						RESERVED_EXT2_QTY,EXT2_BORROW_ID,EXT2_RATE,STATUS,INITIAL_FLAG,
						UPDATED_BY,UPDATED_AT,CREATED_BY,CREATED_AT,COMMENT_TXT,
						INTERNAL_COMMENT_TXT,TRADER_APPROVED_QTY,REQUEST_ID,IM_REQUEST_ID,IM_LOCATE_ID,
						TRADE_COUNTRY_CD,SCHEDULED_AT,AT_POINT_AVAIL_QTY,AGENCY_BORROW_RATE,RECLAIM_RATE,
						ROW_NUMBER, LIQUIDITY_FLAG, TRADE_COUNTRY_ALIAS_CD
			   FROM GEC_LOCATE_PREBORROW
			  WHERE created_at < V_THE_DAY;

		DELETE GEC_LOCATE_PREBORROW WHERE created_at <  V_THE_DAY;
		
		  GEC_LOG_PKG.LOG_PERFORMANCE_END('GEC_DAILY_JOB_PKG.ARCHIVE_ACTIVITIES');
		EXCEPTION WHEN OTHERS THEN
		  Rollback;
		  GEC_LOG_PKG.LOG_PERFORMANCE_END('GEC_DAILY_JOB_PKG.ARCHIVE_ACTIVITIES', 'F', 'FAILUER');
		END ;  
	END ARCHIVE_ACTIVITIES;
	
	PROCEDURE ARCHIVE_PURGE_LOCATES
	IS
		V_DAY_WINDOW NUMBER(10);
		V_THE_DAY GEC_LOCATE_PREBORROW.created_at%TYPE;
		V_TODAY DATE := TRUNC(SYSDATE);
	BEGIN
		GEC_LOG_PKG.LOG_PERFORMANCE_START('GEC_DAILY_JOB_PKG.ARCHIVE_PURGE_LOCATES');
		BEGIN
			SELECT TO_NUMBER(ATTR_VALUE1) INTO V_DAY_WINDOW 
			FROM GEC_CONFIG 
			WHERE ATTR_GROUP = GEC_CONSTANTS_PKG.C_PURGE
			   	AND ATTR_NAME = GEC_CONSTANTS_PKG.C_LOCATE_DAY_WINDOW;
			   	
			V_THE_DAY := V_TODAY - V_DAY_WINDOW;
			
			INSERT INTO GEC_LOCATE_PREBORROW_HISTORY(
						LOCATE_PREBORROW_ID,LOCATE_ID,IM_AVAILABILITY_ID,ASSET_ID,BUSINESS_DATE,
						CLIENT_CD,IM_USER_ID,INVESTMENT_MANAGER_CD,FUND_CD,FUND_SOURCE,
						IM_DEFAULT_FUND_CD,IM_DEFAULT_CLIENT_CD,STRATEGY_ID,TRANSACTION_CD,ASSET_CODE,
						ASSET_CODE_TYPE,CUSIP,ISIN,SEDOL,QUIK,
						TICKER,ASSET_TYPE_ID,DESCRIPTION,FILE_VERSION,SHARE_QTY,
						RESERVED_SB_QTY,SB_QTY_RAL,RESERVED_NSB_QTY,SB_RATE,NSB_LOAN_NO,
						NSB_RATE,INDICATIVE_RATE,SOURCE_CD,REMAINING_SFP,POSITION_FLAG,
						SB_BROKER,RESTRICTION_CD,RESERVED_NFS_QTY,NFS_BORROW_ID,NFS_RATE,
						RESERVED_EXT2_QTY,EXT2_BORROW_ID,EXT2_RATE,STATUS,INITIAL_FLAG,
						UPDATED_BY,UPDATED_AT,CREATED_BY,CREATED_AT,COMMENT_TXT,
						INTERNAL_COMMENT_TXT,TRADER_APPROVED_QTY,REQUEST_ID,IM_REQUEST_ID,IM_LOCATE_ID,
						TRADE_COUNTRY_CD,SCHEDULED_AT,AT_POINT_AVAIL_QTY,AGENCY_BORROW_RATE,RECLAIM_RATE,
						ROW_NUMBER, LIQUIDITY_FLAG, TRADE_COUNTRY_ALIAS_CD	
			)
			SELECT 
					    LOCATE_PREBORROW_ID,LOCATE_ID,IM_AVAILABILITY_ID,ASSET_ID,BUSINESS_DATE,
						CLIENT_CD,IM_USER_ID,INVESTMENT_MANAGER_CD,FUND_CD,FUND_SOURCE,
						IM_DEFAULT_FUND_CD,IM_DEFAULT_CLIENT_CD,STRATEGY_ID,TRANSACTION_CD,ASSET_CODE,
						ASSET_CODE_TYPE,CUSIP,ISIN,SEDOL,QUIK,
						TICKER,ASSET_TYPE_ID,DESCRIPTION,FILE_VERSION,SHARE_QTY,
						RESERVED_SB_QTY,SB_QTY_RAL,RESERVED_NSB_QTY,SB_RATE,NSB_LOAN_NO,
						NSB_RATE,INDICATIVE_RATE,SOURCE_CD,REMAINING_SFP,POSITION_FLAG,
						SB_BROKER,RESTRICTION_CD,RESERVED_NFS_QTY,NFS_BORROW_ID,NFS_RATE,
						RESERVED_EXT2_QTY,EXT2_BORROW_ID,EXT2_RATE,STATUS,INITIAL_FLAG,
						UPDATED_BY,UPDATED_AT,CREATED_BY,CREATED_AT,COMMENT_TXT,
						INTERNAL_COMMENT_TXT,TRADER_APPROVED_QTY,REQUEST_ID,IM_REQUEST_ID,IM_LOCATE_ID,
						TRADE_COUNTRY_CD,SCHEDULED_AT,AT_POINT_AVAIL_QTY,AGENCY_BORROW_RATE,RECLAIM_RATE,
						ROW_NUMBER, LIQUIDITY_FLAG, TRADE_COUNTRY_ALIAS_CD
			FROM GEC_LOCATE_PREBORROW_ARCHIVE
			WHERE CREATED_AT < V_THE_DAY AND
					TRANSACTION_CD = GEC_CONSTANTS_PKG.C_LOCATE; -- only for locate, exclude preborrow
			
			DELETE GEC_LOCATE_PREBORROW_ARCHIVE WHERE CREATED_AT <  V_THE_DAY AND
														TRANSACTION_CD = GEC_CONSTANTS_PKG.C_LOCATE; -- only for locate, exclude preborrow;
			
			GEC_LOG_PKG.LOG_PERFORMANCE_END('GEC_DAILY_JOB_PKG.ARCHIVE_PURGE_LOCATES');
		EXCEPTION WHEN OTHERS THEN
			ROLLBACK;
			GEC_LOG_PKG.LOG_PERFORMANCE_END('GEC_DAILY_JOB_PKG.ARCHIVE_PURGE_LOCATES', 'F', 'FAILUER');
		END;  	
	END ARCHIVE_PURGE_LOCATES;
	

	--Find the first day of day window, eg: day_window = 5 and today is Friday, this function will return Monday.
	FUNCTION GET_BUSINESS_DAY_BY_DAY_WINDOW( P_DAY_WINDOW IN NUMBER ) RETURN DATE
	IS
		V_NDAYS NUMBER(10) := P_DAY_WINDOW;
		V_TODAY DATE := TRUNC(SYSDATE);
	BEGIN
		IF GEC_UTILS_PKG.IS_WORKDAY(V_TODAY) = 'Y' THEN
			V_NDAYS := P_DAY_WINDOW - 1;
		ELSE
			V_NDAYS := P_DAY_WINDOW;
		END IF;
		
		RETURN GEC_UTILS_PKG.GET_TMINUSN(V_TODAY, V_NDAYS);
	EXCEPTION WHEN OTHERS THEN
		RETURN V_TODAY;
	END GET_BUSINESS_DAY_BY_DAY_WINDOW;
	
	PROCEDURE ADD_DAILY_INDEX_RATE
	IS
		v_today GEC_INDEX_RATE.INDEX_DATE%TYPE;
	BEGIN
		v_today := GEC_UTILS_PKG.DATE_TO_NUMBER(SYSDATE);
        INSERT INTO GEC_INDEX_RATE(INDEX_CD,INDEX_DATE,INDEX_RATE)
            select 'DFLT' INDEX_CD ,v_today INDEX_DATE ,99.00 INDEX_RATE from dual 
                where not exists ( 
                    select 1 from GEC_INDEX_RATE 
                     where index_date = v_today
                       and INDEX_CD = 'DFLT'
                    )
            union all
            select 'N/A' INDEX_CD,v_today INDEX_DATE,0.00 INDEX_RATE from DUAL
                where not exists ( 
                    select 1 from GEC_INDEX_RATE 
                     where index_date = v_today
                       and INDEX_CD = 'N/A'
                    ); 
    END ADD_DAILY_INDEX_RATE;
	
  	PROCEDURE ARCHIVE_PURGE_AVAILABILITY
	IS
		--set default values to 0 and 5.
	    V_ARCH_RESERVE_DAYS INTEGER := 0;
	    V_AVAIL_RESERVE_DAYS INTEGER := 5;
	    V_PURGE_DATE GEC_LOCATE_PREBORROW.CREATED_AT%TYPE;
	    V_ARCHIVE_DATE GEC_LOCATE_PREBORROW.CREATED_AT%TYPE;
	BEGIN
		GEC_LOG_PKG.LOG_PERFORMANCE_START('GEC_DAILY_JOB_PKG.ARCHIVE_PURGE_AVAILABILITY');    

		-- get the day num of availability reserved in gec_im_availability	
		SELECT ATTR_VALUE1 INTO V_AVAIL_RESERVE_DAYS 
		  FROM GEC_CONFIG 
		 WHERE ATTR_GROUP = GEC_CONSTANTS_PKG.C_ARCHIVE 
		   AND ATTR_NAME = GEC_CONSTANTS_PKG.C_AVAILABILITY_DAY_WINDOW;

		-- get the day num of availability reserved in gec_im_availability_archive
	    SELECT ATTR_VALUE1 INTO V_ARCH_RESERVE_DAYS 
	      FROM GEC_CONFIG 
		 WHERE ATTR_GROUP = GEC_CONSTANTS_PKG.C_PURGE 
		   AND ATTR_NAME = GEC_CONSTANTS_PKG.C_AVAILABILITY_DAY_WINDOW;	
		  
		-- the records before V_ARCHIVE_DATE need to be archived.
		V_ARCHIVE_DATE := GET_BUSINESS_DAY_BY_DAY_WINDOW(V_AVAIL_RESERVE_DAYS);

		-- the records before V_PURGE_DATE need to be deleted.
		V_PURGE_DATE := GET_BUSINESS_DAY_BY_DAY_WINDOW(V_AVAIL_RESERVE_DAYS + V_ARCH_RESERVE_DAYS);
		
		
		--SELECT GEC_DAILY_JOB_PKG.GET_BUSINESS_DAY_BY_DAY_WINDOW(4) FROM DUAL   
		IF V_ARCH_RESERVE_DAYS > 0 THEN  
			INSERT INTO GEC_IM_AVAILABILITY_ARCHIVE 
			(
			  IM_AVAILABILITY_ID,     ASSET_ID,         BUSINESS_DATE,      CLIENT_CD, 
			  INVESTMENT_MANAGER_CD,  ASSET_CODE,       ASSET_CODE_TYPE,    POSITION_FLAG, 
			  RESTRICTION_CD,         NSB_QTY,          NSB_RATE,           SB_QTY, 
			  SB_QTY_RAL,             SB_RATE,          NFS_QTY,            NFS_RATE, 
			  EXT2_QTY,               EXT2_RATE,        SB_QTY_SOD,         NSB_QTY_SOD, 
			  SB_QTY_RAL_SOD,         NFS_QTY_SOD,      EXT2_QTY_SOD,       SOURCE_CD, 
			  CREATED_BY,             CREATED_AT,       STRATEGY_ID,        TRADE_COUNTRY_CD,
			  STATUS,           COLLATERAL_CURRENCY_CD, COLLATERAL_TYPE,	INDICATIVE_RATE,
			  INTERNAL_COMMENT_TXT,   AVAILABILITY_REGION,	INDICATIVE_RATE_NUMBER
			)
			SELECT
			  IM_AVAILABILITY_ID,     ASSET_ID,         BUSINESS_DATE,      CLIENT_CD, 
			  INVESTMENT_MANAGER_CD,  ASSET_CODE,       ASSET_CODE_TYPE,    POSITION_FLAG, 
			  RESTRICTION_CD,         NSB_QTY,          NSB_RATE,           SB_QTY, 
			  SB_QTY_RAL,             SB_RATE,          NFS_QTY,            NFS_RATE, 
			  EXT2_QTY,               EXT2_RATE,        SB_QTY_SOD,         NSB_QTY_SOD, 
			  SB_QTY_RAL_SOD,         NFS_QTY_SOD,      EXT2_QTY_SOD,       SOURCE_CD, 
			  CREATED_BY,             CREATED_AT,       STRATEGY_ID,        TRADE_COUNTRY_CD,
			  STATUS,           	COLLATERAL_CURRENCY_CD, COLLATERAL_TYPE,	INDICATIVE_RATE,
			  INTERNAL_COMMENT_TXT,	  AVAILABILITY_REGION,	INDICATIVE_RATE_NUMBER  
			 FROM GEC_IM_AVAILABILITY
			WHERE created_at < V_ARCHIVE_DATE
			  AND STATUS != 'A'
			  AND NOT EXISTS (SELECT 1 
			  					FROM GEC_LOCATE_PREBORROW glp
			  				   WHERE glp.IM_AVAILABILITY_ID = GEC_IM_AVAILABILITY.IM_AVAILABILITY_ID);
		END IF;
		    
		DELETE FROM GEC_IM_AVAILABILITY
		 WHERE created_at < V_ARCHIVE_DATE
		   AND STATUS != 'A'
		   AND NOT EXISTS (SELECT 1 
		  					 FROM GEC_LOCATE_PREBORROW glp
		  				    WHERE glp.IM_AVAILABILITY_ID = GEC_IM_AVAILABILITY.IM_AVAILABILITY_ID);
		  				    
		DELETE FROM GEC_IM_AVAILABILITY_ARCHIVE
		 WHERE created_at < V_PURGE_DATE ;
		    
		GEC_LOG_PKG.LOG_PERFORMANCE_END('GEC_DAILY_JOB_PKG.ARCHIVE_PURGE_AVAILABILITY');
	EXCEPTION WHEN OTHERS THEN
		Rollback;			 	
		GEC_LOG_PKG.LOG_PERFORMANCE_EXCEPTION('GEC_DAILY_JOB_PKG.ARCHIVE_PURGE_AVAILABILITY');
		--no raise, not to stop the job process.
	END ARCHIVE_PURGE_AVAILABILITY;

  	PROCEDURE ARCHIVE_PURGE_AVAIL_ERR
	IS
	    V_AVAIL_ERROR_RESERVE_DAYS INTEGER := 30;
	    V_PURGE_DATE GEC_LOCATE_PREBORROW.CREATED_AT%TYPE;
	BEGIN
		GEC_LOG_PKG.LOG_PERFORMANCE_START('GEC_DAILY_JOB_PKG.ARCHIVE_PURGE_AVAIL_ERR');  
		
		SELECT ATTR_VALUE1 INTO V_AVAIL_ERROR_RESERVE_DAYS 
		  FROM GEC_CONFIG 
		 WHERE ATTR_GROUP = GEC_CONSTANTS_PKG.C_PURGE 
		   AND ATTR_NAME = GEC_CONSTANTS_PKG.C_AVAIL_ERR_DAY_WINDOW;		
		
		--GEC-1848
		V_PURGE_DATE := TRUNC(SYSDATE) +1 - V_AVAIL_ERROR_RESERVE_DAYS;
		
		DELETE FROM GEC_AVAILABILITY_ERROR
		 WHERE created_at < V_PURGE_DATE;		  				    
		 
		GEC_LOG_PKG.LOG_PERFORMANCE_END('GEC_DAILY_JOB_PKG.ARCHIVE_PURGE_AVAIL_ERR');
		EXCEPTION WHEN OTHERS THEN
		Rollback;			 	
		GEC_LOG_PKG.LOG_PERFORMANCE_END('GEC_DAILY_JOB_PKG.ARCHIVE_PURGE_AVAIL_ERR', 'E', 'EXCEPTION'); 
		
	END ARCHIVE_PURGE_AVAIL_ERR;
	
	PROCEDURE ARCHIVE_MESSAGE
	IS
		V_ARCHIVE_DAY_NUMBER NUMBER(10);
		
		V_ARCHIVE_DAY GEC_MESSAGE.CREATED_AT%TYPE;
		
		V_TODAY DATE := TRUNC(SYSDATE);
	BEGIN
		GEC_LOG_PKG.LOG_PERFORMANCE_START('GEC_DAILY_JOB_PKG.ARCHIVE_MESSAGE');
		--ARCHIVE 10 DAYS MESSAGES. IT IS CONFIGED IN DB.
        BEGIN
	        SELECT TO_NUMBER(ATTR_VALUE1) INTO V_ARCHIVE_DAY_NUMBER
	        FROM GEC_CONFIG
	        WHERE ATTR_GROUP = GEC_CONSTANTS_PKG.C_ARCHIVE 
	            AND ATTR_NAME =GEC_CONSTANTS_PKG.C_MESSAGE_ARCHIVE_DAY_WINDOW;
	        V_ARCHIVE_DAY := V_TODAY-V_ARCHIVE_DAY_NUMBER;
	        
	        INSERT INTO GEC_MESSAGE_HISTORY(MESSAGE_ID,  REQUEST_ID,  MESSAGE_TYPE,	CREATED_AT,  
	                                        MESSAGE_CONTENT,  SOURCE_CD,  STATUS,  LAST_UPDATED_AT,
	                                        LAST_UPDATED_BY)
	        SELECT MESSAGE_ID,  REQUEST_ID,  MESSAGE_TYPE,	CREATED_AT,  
	                                        MESSAGE_CONTENT,  SOURCE_CD,  STATUS,  LAST_UPDATED_AT ,
	                                        LAST_UPDATED_BY 
	        FROM GEC_MESSAGE
	        WHERE CREATED_AT < V_ARCHIVE_DAY;
	        
	        DELETE FROM GEC_MESSAGE WHERE CREATED_AT < V_ARCHIVE_DAY;
	        
	        GEC_LOG_PKG.LOG_PERFORMANCE_END('GEC_DAILY_JOB_PKG.ARCHIVE_MESSAGE');
        EXCEPTION WHEN OTHERS THEN
        	ROLLBACK;
        	GEC_LOG_PKG.LOG_PERFORMANCE_END('GEC_DAILY_JOB_PKG.ARCHIVE_MESSAGE', 'F', 'FAILUER');
        END;
        
		
	END ARCHIVE_MESSAGE;
	
	PROCEDURE DELETE_ARCHIVED_MESSAGE
	IS
		V_DELETE_DAY_NUMBER  NUMBER(10);
		V_DELETE_DAY  GEC_MESSAGE_HISTORY.CREATED_AT%TYPE;
		V_TODAY DATE := TRUNC(SYSDATE);
	BEGIN
		GEC_LOG_PKG.LOG_PERFORMANCE_START('GEC_DAILY_JOB_PKG.DELETE_ARCHIVED_MESSAGE');
	    --DELETE HISTORY'S MESSAGE. IT IS CONFIGED IN DB. NOW THE MESSAGE CAN NOT BE DELETED. SO SET 
		--V_DELETE_DAY_NUMBER IS 36500 
		BEGIN
			SELECT TO_NUMBER(ATTR_VALUE1) INTO V_DELETE_DAY_NUMBER
			FROM GEC_CONFIG
			WHERE ATTR_GROUP = GEC_CONSTANTS_PKG.C_DELETE 
	            AND ATTR_NAME =GEC_CONSTANTS_PKG.C_MESSAGE_DELETE_DAY_WINDOW;
	        V_DELETE_DAY := V_TODAY-V_DELETE_DAY_NUMBER;
	        DELETE FROM GEC_MESSAGE_HISTORY WHERE CREATED_AT < V_DELETE_DAY;
	        GEC_LOG_PKG.LOG_PERFORMANCE_END('GEC_DAILY_JOB_PKG.DELETE_ARCHIVED_MESSAGE');
		EXCEPTION WHEN OTHERS THEN
			ROLLBACK;
			GEC_LOG_PKG.LOG_PERFORMANCE_END('GEC_DAILY_JOB_PKG.DELETE_ARCHIVED_MESSAGE', 'F', 'FAILUER');
		END;
	END DELETE_ARCHIVED_MESSAGE;          

    PROCEDURE ARCHIVE_PURGE_EXCHANGE_RATE
    IS
         V_TODAY DATE := TRUNC(SYSDATE);
         V_ARCHIVE_DAY_NUM NUMBER(10);
         V_ARCHIVE_DATE  DATE;
    BEGIN
        GEC_LOG_PKG.LOG_PERFORMANCE_START('GEC_DAILY_JOB_PKG.ARCHIVE_PURGE_EXCHANGE_RATE');
        SELECT TO_NUMBER(ATTR_VALUE1) INTO V_ARCHIVE_DAY_NUM
        FROM GEC_CONFIG
        WHERE ATTR_GROUP = GEC_CONSTANTS_PKG.C_ARCHIVE 
	            AND ATTR_NAME =GEC_CONSTANTS_PKG.C_EXCHAGE_RATE_DAY_WINDOW;
	    V_ARCHIVE_DATE := V_TODAY- V_ARCHIVE_DAY_NUM; 
	    INSERT INTO GEC_EXCHANGE_RATE_ARCHIVE(
	                 EXCHANGE_RATE_ID, EXCHANGE_CURRENCY_CD,EXCHANGE_DATE,EXCHANGE_RATE	,COST_OF_FUNDS_RATE,CREATE_DATE,
	                 EXTENDED_EXCHANGE_RATE)
	            SELECT EXCHANGE_RATE_ID, EXCHANGE_CURRENCY_CD,EXCHANGE_DATE,EXCHANGE_RATE	,COST_OF_FUNDS_RATE,CREATE_DATE,
	                 EXTENDED_EXCHANGE_RATE
	            FROM GEC_EXCHANGE_RATE
	            WHERE TO_DATE(EXCHANGE_DATE,'YYYYMMDD') < V_ARCHIVE_DATE;
	     DELETE FROM  GEC_EXCHANGE_RATE WHERE TO_DATE(EXCHANGE_DATE,'YYYYMMDD') < V_ARCHIVE_DATE;      
        GEC_LOG_PKG.LOG_PERFORMANCE_END('GEC_DAILY_JOB_PKG.ARCHIVE_PURGE_EXCHANGE_RATE');
    EXCEPTION 
        WHEN OTHERS THEN
        ROLLBACK;
        GEC_LOG_PKG.LOG_PERFORMANCE_END('GEC_DAILY_JOB_PKG.ARCHIVE_PURGE_EXCHANGE_RATE', 'F', 'FAILUER');
    END ARCHIVE_PURGE_EXCHANGE_RATE;
    
    PROCEDURE PURGE_ASSET_AUD
	IS
		V_DELETE_DAY_NUMBER  NUMBER(10);
		V_DELETE_DAY  GEC_ASSET_AUD.LAST_UPDATED_AT%TYPE;
		V_TODAY DATE := TRUNC(SYSDATE);
	BEGIN
		GEC_LOG_PKG.LOG_PERFORMANCE_START('GEC_DAILY_JOB_PKG.PURGE_ASSET_AUD');
		BEGIN
			-- GET PURGE DAY WINDOW WHICH CONFIGURED IN GEC_CONFIG TABLE.
			SELECT TO_NUMBER(ATTR_VALUE1) INTO V_DELETE_DAY_NUMBER
			  FROM GEC_CONFIG
			WHERE ATTR_GROUP = GEC_CONSTANTS_PKG.C_PURGE 
	          AND ATTR_NAME =GEC_CONSTANTS_PKG.C_ASSET_AUDIT_DAY_WINDOW;
	        V_DELETE_DAY := V_TODAY-V_DELETE_DAY_NUMBER;
	        DELETE FROM GEC_ASSET_AUD WHERE LAST_UPDATED_AT < V_DELETE_DAY;
	        GEC_LOG_PKG.LOG_PERFORMANCE_END('GEC_DAILY_JOB_PKG.PURGE_ASSET_AUD');
		EXCEPTION WHEN OTHERS THEN
			ROLLBACK;
			GEC_LOG_PKG.LOG_PERFORMANCE_END('GEC_DAILY_JOB_PKG.PURGE_ASSET_AUD', 'F', 'FAILUER');
		END;
    END PURGE_ASSET_AUD;
    
       
	  PROCEDURE ARCHIVE_PURGE_LENDER_AVAIL
	    IS
	      --set default values to 7 and 90.
	        V_ARCH_RESERVE_DAYS INTEGER := 90;
	        V_AVAIL_RESERVE_DAYS INTEGER := 7;
	        V_PURGE_DATE GEC_LENDER_AVAILABILITY.CREATED_AT%TYPE;
	        V_ARCHIVE_DATE GEC_LENDER_AVAILABILITY.CREATED_AT%TYPE;
	    BEGIN
	      GEC_LOG_PKG.LOG_PERFORMANCE_START('GEC_DAILY_JOB_PKG.ARCHIVE_PURGE_LENDER_AVAIL');    
	  
	      -- get the day num of availability reserved in GEC_LENDER_AVAILABILITY	
	      SELECT ATTR_VALUE1 INTO V_AVAIL_RESERVE_DAYS 
	        FROM GEC_CONFIG 
	       WHERE ATTR_GROUP = GEC_CONSTANTS_PKG.C_ARCHIVE 
	         AND ATTR_NAME = GEC_CONSTANTS_PKG.C_LENDER_AVAIL_DAY_WINDOW;
	  
	      -- get the day num of availability reserved in GEC_LENDER_AVAILABILITY
	        SELECT ATTR_VALUE1 INTO V_ARCH_RESERVE_DAYS 
	          FROM GEC_CONFIG 
	       WHERE ATTR_GROUP = GEC_CONSTANTS_PKG.C_PURGE 
	         AND ATTR_NAME = GEC_CONSTANTS_PKG.C_LENDER_AVAIL_DAY_WINDOW;	
	        
	      -- the records before V_ARCHIVE_DATE need to be archived.
	      V_ARCHIVE_DATE := GET_BUSINESS_DAY_BY_DAY_WINDOW(V_AVAIL_RESERVE_DAYS);
	  
	      -- the records before V_PURGE_DATE need to be deleted.
	      V_PURGE_DATE := GET_BUSINESS_DAY_BY_DAY_WINDOW(V_AVAIL_RESERVE_DAYS + V_ARCH_RESERVE_DAYS);
	      
		  
		  UPDATE GEC_LENDER_AVAILABILITY gla SET gla.STATUS = 'I' 
	      WHERE gla.STATUS = 'A' 
	      --AND GLA.SOURCE_CD IS NULL
	      AND GLA.created_at < V_ARCHIVE_DATE;
		  
		  
		--SELECT GEC_DAILY_JOB_PKG.GET_BUSINESS_DAY_BY_DAY_WINDOW(4) FROM DUAL   
		IF V_AVAIL_RESERVE_DAYS > 0 THEN  
			INSERT INTO GEC_LENDER_AVAILABILITY_ARCHV 
			(
				LENDER_AVAILABILITY_ID,	ASSET_ID,	BROKER_CD,	LEGAL_ENTITY_ID,
				AVAIL_QTY,	INDICATIVE_RATE,	FUND_CD,	RECLAIM_RATE,
				CREATED_DATETIME,	STATUS,	CREATED_AT,	CREATED_BY,	SOURCE_CD,
				POSITION_FLAG,	RESTRICTION_CD,	ORDER_EXP_DATE,	LEGAL_ENTITY_CD, INDICATIVE_RATE_NUMBER
			)
			SELECT
			  	LENDER_AVAILABILITY_ID,	ASSET_ID,	BROKER_CD,	LEGAL_ENTITY_ID,
				AVAIL_QTY,	INDICATIVE_RATE,	FUND_CD,	RECLAIM_RATE,
				CREATED_DATETIME,	STATUS,	CREATED_AT,	CREATED_BY,	SOURCE_CD,
				POSITION_FLAG,	RESTRICTION_CD,	ORDER_EXP_DATE,	LEGAL_ENTITY_CD, INDICATIVE_RATE_NUMBER
			 FROM GEC_LENDER_AVAILABILITY
			WHERE created_at < V_ARCHIVE_DATE
			  AND STATUS != 'A';
		END IF;	  
	      
	    DELETE FROM GEC_LENDER_AVAIL_BRW_MAP
	       WHERE LENDER_AVAILABILITY_ID in 
	        (SELECT LENDER_AVAILABILITY_ID 
	        FROM GEC_LENDER_AVAILABILITY gla  
	        WHERE GLA.created_at < V_ARCHIVE_DATE);  
	     
	    DELETE FROM GEC_LENDER_AVAILABILITY
		 WHERE created_at < V_ARCHIVE_DATE
		   AND STATUS != 'A';
	                    
	    DELETE FROM GEC_LENDER_AVAILABILITY_ARCHV
	       WHERE created_at < V_PURGE_DATE ;
	          
	      GEC_LOG_PKG.LOG_PERFORMANCE_END('GEC_DAILY_JOB_PKG.ARCHIVE_PURGE_LENDER_AVAIL');
	    EXCEPTION WHEN OTHERS THEN
	      Rollback;			 	
	      GEC_LOG_PKG.LOG_PERFORMANCE_EXCEPTION('GEC_DAILY_JOB_PKG.ARCHIVE_PURGE_LENDER_AVAIL');
	      --no raise, not to stop the job process.
	  END ARCHIVE_PURGE_LENDER_AVAIL;
      
    PROCEDURE CHECK_EXPIRE_BULK_G1_TRADES
    IS
    	V_BULK_G1_TRADE_DAY_WINDOW GEC_CONFIG.ATTR_VALUE1%TYPE;
    	V_DAYS NUMBER;
    BEGIN
    	BEGIN 
    		SELECT ATTR_VALUE1 INTO V_BULK_G1_TRADE_DAY_WINDOW
    		FROM GEC_CONFIG
    		WHERE ATTR_GROUP = 'EXPIRE' AND ATTR_NAME = 'BULK_G1_TRADE_DAY_WINDOW';
    		V_DAYS :=TO_NUMBER(V_BULK_G1_TRADE_DAY_WINDOW);
      	EXCEPTION WHEN OTHERS THEN
        		V_DAYS :=30;
    	END;      
    	UPDATE GEC_BULK_G1_TRADE GB
    	SET GB.STATUS=GEC_CONSTANTS_PKG.C_BULK_TRADE_EXPIRED,
    		GB.STATUS_MSG=GEC_CONSTANTS_PKG.C_BULK_TRADE_EXPIRED_MSG
    	WHERE GB.UPDATED_AT < TRUNC(SYSDATE) - V_DAYS
    	AND (GB.SETTLE_DATE IS NULL OR GB.SETTLE_DATE < GEC_UTILS_PKG.DATE_TO_NUMBER(SYSDATE-V_DAYS))
    	AND GB.STATUS IN ('E','P');
    END CHECK_EXPIRE_BULK_G1_TRADES;
    
    PROCEDURE CHECK_EXPIRE_BULK_G1_RETURNS
    IS
    	V_BULK_G1_TRADE_DAY_WINDOW GEC_CONFIG.ATTR_VALUE1%TYPE;
    	V_DAYS NUMBER;
    BEGIN
    	BEGIN 
    		SELECT ATTR_VALUE1 INTO V_BULK_G1_TRADE_DAY_WINDOW
    		FROM GEC_CONFIG
    		WHERE ATTR_GROUP = 'EXPIRE' AND ATTR_NAME = 'BULK_G1_RETURN_DAY_WINDOW';
    		V_DAYS :=TO_NUMBER(V_BULK_G1_TRADE_DAY_WINDOW);
      	EXCEPTION WHEN OTHERS THEN
        		V_DAYS :=30;
    	END;      
    	UPDATE GEC_BULK_G1_RETURN GB
    	SET GB.STATUS='E'
    	WHERE GB.UPDATED_AT < TRUNC(SYSDATE) - V_DAYS
    	AND (GB.SETTLE_DATE IS NULL OR GB.SETTLE_DATE < GEC_UTILS_PKG.DATE_TO_NUMBER(SYSDATE-V_DAYS))
    	AND GB.STATUS IN ('X','P');
    END CHECK_EXPIRE_BULK_G1_RETURNS;
    
    PROCEDURE ARCHIVE_PURGE_JOB_LOG
    IS
    --set default values to 365.
	    V_ARCH_RESERVE_DAYS INTEGER := 365;
	    V_PURGE_DATE DATE;    
    BEGIN
      GEC_LOG_PKG.LOG_PERFORMANCE_START('GEC_DAILY_JOB_PKG.ARCHIVE_PURGE_JOB_LOG');  
		
      SELECT ATTR_VALUE1 INTO V_ARCH_RESERVE_DAYS 
        FROM GEC_CONFIG 
       WHERE ATTR_GROUP = GEC_CONSTANTS_PKG.C_PURGE 
         AND ATTR_NAME = GEC_CONSTANTS_PKG.C_JOB_LOG_DAY_WINDOW;	
         
      -- the records before V_PURGE_DATE need to be purged.
      V_PURGE_DATE := GET_BUSINESS_DAY_BY_DAY_WINDOW(V_ARCH_RESERVE_DAYS);
      
      DELETE FROM GEC_JOB_LOG WHERE TO_DATE(TO_CHAR (start_time, 'YYYY-MON-DD HH24:MI:SS'),'YYYY-MON-DD HH24:MI:SS') < V_PURGE_DATE;
      
      GEC_LOG_PKG.LOG_PERFORMANCE_END('GEC_DAILY_JOB_PKG.ARCHIVE_PURGE_JOB_LOG');
	    EXCEPTION WHEN OTHERS THEN
        	ROLLBACK;
        	GEC_LOG_PKG.LOG_PERFORMANCE_END('GEC_DAILY_JOB_PKG.ARCHIVE_PURGE_JOB_LOG', 'F', 'FAILUER');
    END ARCHIVE_PURGE_JOB_LOG;
    
END GEC_DAILY_JOB_PKG;
/
